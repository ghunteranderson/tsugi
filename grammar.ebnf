module = module_declaration , module_imports , module_body ;

module_declaration = "module" , qualified_identifier , ";" ;

module_imports = "import" , "(" , qualified_identifier { "," , qualified_identifier } , [ "," ] , ")" 
               | "import" , "(" , ")" ;

module_body = { variable_declaration | function_declaration } ;

variable_declaration = qualified_identifier , identifier , [ "=" , expression ] , ";" ;

variable_assignment = qualified_identifier , "=" , expression , ";" ;

struct_declaration = "struct" , identifier , "{" , "}"
                   | "struct", identifier , "{" , struct_member , { "," , struct_member} , [ "," ] , "}" ;

struct_constructor = "new" , qualified_identifier , "{" , "}" 
                   | "new" , qualified_identifier , "{" , struct_constructor_assignment , { "," , struct_constructor_assignment} , [ "," ] , "}" ;

struct_constructor_assignment = identifier , ":" , expression

struct_member = qualified_identifier , identifier;

function_declaration = "function" , qualified_identifier , identifier , "(" , [ function_parameter , { "," function_parameter } ] , ")" , statement_block ;

function_parameter = qualified_identifier , identifier ;

function_invocation = qualified_identifier , "(" , [ expression , { "," , expression } ] , ")" ;

qualified_identifier identifier ,  [ "." identifier ] ;

statement_block = "{" , { statement } , "}" ;

statement = variable_declaration
          | variable_assignment
          | expression , ";"
          | return_statement ;

return_statement = "return" , expression , ";" ;

identifier = (letter | "_") , { letter | "_" | digit } ;

letter = "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z" ;

3 * 4 + 1 * 4

expression = term
           | term , "+" , term
           | term , "-" , term

term = factor
     | factor , "*" , factor
     | factor , "/" , factor

factor = literal | qualified_identifier | ( expression ) | function_invocation

literal = number | string

string = "\"" , { character - "\"" } , "\""

character = letter | digit | symbol | " "

digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

number = [ "-" ] , digit , { digit } , [ "." , digit , { digit } ]

symbol = "!" | "\"" | "#" | "$" | "%" | "&" | "'" | "(" | ")" | "*"
       | "+" | "," | "-" | "." | "/" | ":" | ";" | "<" | "=" | ">"
       | "?" | "@" | "`" | "[" | "{" | "\\" | "|" | "]" | "}" | "^" | "~" | "_"